Specify the name of the deployment that requires the PVC resource.

2

Setting the add option to true adds volumes and volume mounts for containers.

3

The name option specifies a volume name. If not specified, a name is autogenerated.

4

The supported types, for the add operation, include emptyDir, hostPath, secret, configMap, and persistentVolumeClaim.

5The claim-mode option defaults to ReadWriteOnce. The valid values are ReadWriteOnce (RWO), ReadWriteMany (RWX), and ReadOnlyMany (ROX).

6 Create a claim with the given size in bytes, if specified along with the persistent volume type. The size must use SI notation, for example, 15, 15 G, or 15 Gi.

7 The mount-path option specifies the mount path inside the container.

8 The claim-name option provides the name for the PVC, and is required for the persistentVolumeClaim type.

jason.wong@trainocate.com
+6012 273 6143

Docker popularized container 2014

Redhat
- docker cmd
- podman cmd

K8s and OpenShift (RHOCP)
- kurbenetes.io

Vmware Tanzu
GKE
AKS
Amazon EKS

Open Container Initiative (OCI)
- docker

RHEL
- 8-9GB (base, appl, runtime

Universal base image (ubi)
- redhat minimized RHEL

quay.io

COPY script /home/user/

USER mysql

RUN /home/user/script

RUN cp
CMD
RUN mv



https://training-lms.redhat.com

container
- ephemeral
- short-lived
- persistent volume


RHv9
jason$ vi aabcd
FROM ubuntu
RUN
COPY
$ podman pull docker://docker.io/library/

$ podman build -t appA:v1 . -f aabcd
layer1...
layer2

/home/jason/....
Registries
quay.io
 -- repositories
docker.io
frog.io

k8s

openshift
- source to image
- mini CI/CD

CI/CD

Anthos
- mesh services
- catalog

docker
alias docker=podman
docker build
podman build
docker run
podman run

kubectl run
oc run
oc new-app
- S2i
oc start-build
tainting
master nodes - untainted
- not supposed application
- infrastructure pod/application (dns, AD,router, TLS cert, and other operators)

cluster: 
node-pool1:
node-pool2: intel opteron

oc login -u admin / developer -p <aaa> https://ocp4.example.com:6443

app1.project.api.ocp4.jason.com

podman pull library/nginx:latest

cmd1; cmd2
cmd1 && cmd2 || cmd3

Container CodeReady
single node cluster
update cert
./crc setup
 secret
./crc start


K8s
- namespace
- deployments
- ingress 

Openshift
- project
- deployment config
- route

OperatorHub - RH marketplace
- install additional operator

To view logs from nodes
oc get node
oc adm node-logs --help

To view logs on workloads
oc logs pod/deployment/bc/dc

podman inspect
skopeo inspect

RH
journald -binary (persistent)
/var/log
deployment (k8s)
- multiple pods
deploymentConfig(dc)
- add additional
- multiple pods


Declarative syntax
- current: 2 --> desired: 3 DB
 -automatc
vs
Imperative syntax
- scripting
- step by step
- customized/control

cmd > /tmp/log
DO288
quota : soft 
limit : hard
reservation : min


FROM ubi

RUN apt-get install nodejs java

podman build -t


systemctl <subcommand> - --
kubectl <>
oc login -u admin -p <> api....
oc project abcd
oc new-project abcd
oc get <resource-type> -o wide
- tabular
oc describe 
- tanza

Deployment 2 pods
- delete pods (ephemeral)

oc new-app
oc run --name appA

oc logs pod ...
oc get project
oc get namespace
oc get nodes
oc get machine
oc get all -n openshift-route
- all resources in the current project
  pods / rc / rs / services /routes/ configmap / secrets
oc status
- all resources in the current project in summary format

DO280
DO288 
DO380 
DO480 

spec : desired state : 10mb ram 100mhz x10
status/state: current state  :5 

oc new-app --name aaa --image=docker.io/....
oc new-app --name aaa --image=docker.io/.... --as-deployment-config

vi appl.yaml
export EDITOR=vim
oc edit deployment/<name>
oc patch

manage deployment
- set label
- set image url
oc describe deployment
spec:
   replicas: 2

oc scale --replicas=4
RHCE
condtiion: cpu 
oc auto-scale

oc run pod
app=jason
oc delete all -l app=jason

oc describe deploymen/aaa | egrep -i "mem|cpu" -B5 -A5

yaml

JSON
{ ,}

XML
<aaa> </aaa>

toml

Student User / student
root / redhat

docker
podman run --name -d
-i
-t

oc exec
- execute cmd and get result
- non-interactively
- bypass ssh, selinux
- fast, latency-sensitive
vs
oc rsh
- interactively
- ssh (subject ssh , selinux)
vs
oc attach
- receive stream output from container/pod
vs
oc logs
- receive output not only from container/pod
- can be from bc/build/deployment/dc/


container - ephemeral
- httpd / mariadb (process )
- ubi / ubuntu 

rootless
- network port > 1024

PV - deployment --> pod
- provider : GCE PD (snapshot)
- provider : Netapp FlexVolume (snapshot /snapmirror
- local disk

kasten
veaams

podman push quay.io/jason_wong76/aaa
username:
password: 
podman pull --cred

DockerFile
FROM
RUN
COPY
...
...
ENTRYPOINT "httpd","-D","FOREGROUND"
CMD "httpd","-D","FOREGROUND"
CMD "ping","127.0.0.1"
/bin/sh -c ping

docker
podman pull
podman run
podman build
podman exec
podman logs
podman inspect
- image that downloaded in local system
podman rm
- delete container/process
podman rmi

skopeo inspect docker.io/library/httpd
- tag

podman cp /tmp/file jason:/tmp/


abcd:11
- no ping/traceroute/netstat/ip/nmcli
- ps / vi
host:
podman -v "/usr/sbin:/usr/sbin:Z" -v

cluster 
- oc run --image=image:toolbox
oc get -o yaml >
vi docker

oc set volume
oc set env  
- update config map on deployment/dc
oc set data
- update secret




Block-based (SAN)
- raw device ---> LUNs
- FC 
- FCoE 
- iSCSI
- NVMeoFC (32Gb/s)
- NVMeoTCP
- Infiniband
     90GB/s
podman -v
vs
File-based (NAS)
- CIFS
- NFS
- IPv4 
vs
Object-based
- S3 --> bucket
  Netapp S3
  Netapp STorageGRid
- GCS bucket
- Azure Blob -> Container
- Rest API


oc run - pod
oc create deployment
oc create service
oc create dc
oc create

Deployment/DC
- rolling update
- RS (minus rolling update)
pods --> Replication Controllers
- rolling update-
- scaling + replication
vs
ReplicaSets

vs
StatefulSets

RH Container Catalog

Software collection library (SCL)
github  web server using openshift

Manually
- YAML file
- oc scale deployment/name --replicas=5
- oc autoscale deployment/name --min --max --cpu
  HPA - cpu/memory
api.ocp4.example.com

trainocate.com --> node1 (SG)
trainocate.com/videos --> node2 (US)

Cap Theorem
NFS (filesystem + protocol)
vs
SMBv1 SMBv3
- protocol
vs
CIFS \\
- filesystem

SAMBA
- opensource package installed in linux
- can connect to CIFS(SMB) on Windows

Object-based (IP)
- Rest API  : get / put / post / patch
- AWS S3 , StorageGrid

Advanced Scheduling
- Long list of predicates: https://docs.openshift.com/container-platform/3.11/admin_guide/scheduling/scheduler.html#available-predicates
- P ority functions: https://docs.openshift.com/container-platform/3.11/admin_guide/scheduling/scheduler.html#available-priority-functions





Fault Tolerance
vs
High Available 
- node (cpu,disk
vs
Disaster Recovery

taint - dirty (master)

K8s
- look cpu from 1 core / milicore


1 socket = 20 (each core @ 4GHz)
20 --> openshift = 20000 milicores

appA - 400MHz
oc .... 1 core = 1000 milicore = 4GHz
400m

vcpu 

Image Streams
Image Stream Tags
Image Stream Tags Aliases
Image Trigger
Openshift installation
- openshift namespace
  -- IS
- internal openshift registry

oc get rs
oc edit rs/re......






